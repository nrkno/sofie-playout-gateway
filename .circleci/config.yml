version: 2
jobs:

  validate-dependencies:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}
            - yarn-cache-

      - run: yarn install
      - run:
          name: yarn validate:dependencies
          command: |
            if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
              yarn validate:dependencies
            else
              echo "Skipping audit"
            fi

  validate-all-dependencies:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}
            - yarn-cache-
            
      - run: yarn install
      - run: yarn validate:dependencies
      - run: yarn validate:dev-dependencies

  test:
    docker:
      - image: circleci/node:12
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}
            - yarn-cache-

      - run: yarn install

      - save_cache:
          key: yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: [node_modules]

      - run: yarn test
      - run: yarn send-coverage

      - persist_to_workspace:
          root: .
          paths: [.]
      - store_artifacts:
          path: ./coverage/clover.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: ./coverage/clover.xml

  build:
    docker:
      - image: circleci/node:12.16.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-cache-{{ .Branch }}
            - yarn-cache-
      - run:
          name: yarn install
          command: yarn install --check-files --frozen-lockfile
          no_output_timeout: 60m
      - run:
          name: yarn build
          command: yarn build
          no_output_timeout: 60m
      - run:
          name: yarn install production
          command: yarn install --check-files --frozen-lockfile --production --force
          no_output_timeout: 60m
      - save_cache:
          key: yarn-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths: 
            - node_modules
      - persist_to_workspace:
          root: .
          paths: [.]

  # This is handled by Jenkins currently. This block is untested, but should work fine.
  # Note: Make sure to setup standard-version to skip-ci to avoid an infinite build loop!
  # release:
  #   docker:
  #     - image: circleci/node:12
  #   working_directory: ~/project
  #   steps:
  #     - attach_workspace:
  #         at: ~/project
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "8d:6d:9a:46:be:ea:ae:99:a9:d4:97:b7:42:0e:bc:59"
  #     - run: mkdir -p ~/.ssh
  #     - run:
  #         name: Keyscan Github
  #         command: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
  #     # Clean working tree, tag, and push
  #     - run: git config --global user.email "info@superfly.tv"
  #     - run: git config --global user.name "superflytvab"
  #     - run: yarn release
  #     - run: git push --follow-tags origin HEAD

  publish-tag:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker:
          version: 18.06.0-ce
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t playout-gateway:$CIRCLE_TAG
      - run:
           name: Publish Docker Image to Docker Hub
           command: |
             if [ -z "$DOCKERHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
               docker tag playout-gateway:$CIRCLE_TAG $DOCKERHUB_IMAGE:$CIRCLE_TAG
               docker push $DOCKERHUB_IMAGE:$CIRCLE_TAG
             fi
      - run:
           name: Publish Docker Image to Github Package Registry
           command: |
             if [ -z "$GITHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
               docker tag playout-gateway:$CIRCLE_TAG docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
               docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_TAG
             fi
  publish-branch:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - setup_remote_docker:
          version: 18.06.0-ce
      - attach_workspace:
          at: .
      - run:
          name: Build Docker Image
          command: docker build -f Dockerfile.circle . -t playout-gateway:$CIRCLE_BRANCH
      - run:
           name: Publish Docker Image to Docker Hub
           command: |
             if [ -z "$DOCKERHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
               docker tag playout-gateway:$CIRCLE_BRANCH $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
               docker push $DOCKERHUB_IMAGE:$CIRCLE_BRANCH
             fi
      - run:
           name: Publish Docker Image to Github Package Registry
           command: |
             if [ -z "$GITHUB_PASS" ]; then
               echo "Skipping"
             else
               echo "$GITHUB_PASS" | docker login docker.pkg.github.com -u "$GITHUB_USERNAME" --password-stdin
               docker tag playout-gateway:$CIRCLE_BRANCH docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
               docker push docker.pkg.github.com/$GITHUB_IMAGE:$CIRCLE_BRANCH
             fi

workflows:
  version: 2
  build-test-publish:
    jobs:
      # - test
      - validate-all-dependencies:
          filters:
            branches:
              only:
                - master
                - develop
      - validate-dependencies:
          filters:
            branches:
              only:
                - master
                - develop
      - build:
          requires:
            # - test
            - validate-dependencies
          filters:
            tags:
              only: /v.*/
            branches:
              only: /.*/
      # Jenkins handles release currently
      # - release: # This triggers a new pipeline, which will build that tag
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - master
      - publish-tag:
          requires:
            - build
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
      - publish-branch:
          requires:
            - build
          filters:
            tags:
              ignore: /.*/
            branches:
              only: 
                - master
                - develop
                - stage
                - /release\d+/
